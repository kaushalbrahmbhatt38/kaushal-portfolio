const express = require('express');
const cors = require('cors');
const axios = require('axios');
const bodyParser = require('body-parser');
const path = require('path');

// Load environment variables from .env file if present
try {
  require('dotenv').config();
} catch (e) {
  console.log('dotenv not installed, skipping .env loading');
}

const app = express();
const PORT = process.env.PORT || 3000;

// Salesforce OAuth configuration
const SF_CLIENT_ID = process.env.SF_CLIENT_ID;
const SF_CLIENT_SECRET = process.env.SF_CLIENT_SECRET;
const SF_AUDIENCE = process.env.SF_AUDIENCE;
const SF_GRANT_TYPE = process.env.SF_GRANT_TYPE;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// This middleware serves the static files generated by the Angular app build.
// When the Angular app is built (typically with `ng build`), the output is placed in the 'dist/kaushal-portfolio' directory.
// By using express.static, any requests for static assets (HTML, JS, CSS, images, etc.) will be served from this directory.
// This allows the Node.js server to host the Angular frontend alongside the API endpoints.
app.use(express.static(path.join(__dirname, 'dist/kaushal-portfolio')));

// Salesforce authentication proxy endpoint
app.get('/api/salesforce/auth', async (req, res) => {
  try {
    const params = new URLSearchParams();
    params.append('grant_type', SF_GRANT_TYPE);
    params.append('client_id', SF_CLIENT_ID);
    params.append('client_secret', SF_CLIENT_SECRET);

    const response = await axios.post(
      SF_AUDIENCE+'/services/oauth2/token',
      params.toString(),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );

    res.json(response.data);
  } catch (error) {
    console.error('Error authenticating with Salesforce:', error.response?.data || error.message);
    res.status(error.response?.status || 500).json({
      error: 'Authentication failed',
      details: error.response?.data || error.message
    });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
}); 